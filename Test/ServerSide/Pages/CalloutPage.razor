@page "/calloutPage"

<h1>Callout</h1>

<Dropdown TItem=@DirectionalHint 
          ItemsSource=@(Enum.GetValues(typeof(DirectionalHint)).Cast<DirectionalHint>().ToList())
          SelectedKeysChanged=@SelectedKeyChanged
          >
    <ItemTemplate>
        <DropdownItem TItem=@DirectionalHint ItemKey=@context.ToString() Text=@context.ToString() />
    </ItemTemplate>
</Dropdown>

<div style="height:200px;"></div>
<div style="display:inline;overflow-x:auto;">
    <div style="width:300px"></div>
    <DefaultButton Text="Show Callout" OnClick=ClickHandler @ref="calloutTarget" />
    <div style="width:300px"></div>
</div>
<div style="height:400px;"></div>
@if (!calloutHidden)
{
<Callout FabricComponentTarget=@calloutTarget         
         DirectionalHint=@SelectedDirection
         OnDismiss=@DismissHandler
         >
    <div Style="max-width:300px; padding:20px;">
        <h2>Callout Test</h2>
        <p style="min-width: 150px;">
            There are a few things in here.
        </p>
        <PrimaryButton Text="Ok" />
    </div>
</Callout>
}

@code { 

    bool isInitialized = false;
    bool calloutHidden = true;

    FabricComponentBase calloutTarget;

    DirectionalHint SelectedDirection = DirectionalHint.LeftCenter;

    Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        calloutHidden = !calloutHidden;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected Task DismissHandler()
    {
        calloutHidden = true;
        return Task.CompletedTask;
    }

    Task SelectedKeyChanged(System.Collections.Generic.List<string> selectedKeys)
    {
        if (selectedKeys.Count > 0)
        {
            SelectedDirection = (DirectionalHint)Enum.Parse(typeof(DirectionalHint),selectedKeys.First());

        }
        return Task.CompletedTask;
    }
}