@page "/"


<h2>Labels</h2>
<Label>Standard Label</Label>
<Label Required="true">Required Label</Label>
<Label Disabled="true">Disabled Label</Label>

<h2>Checkboxes</h2>
<Label>Checkbox is @(isChecked ? "checked" : "unchecked").</Label>
<Checkbox Label="Regular Checkbox"  @bind-Checked=@isChecked @bind-Checked:event="CheckChanged" />
<Checkbox Label="Disabled Checkbox" Disabled="true" />
<Checkbox Label="Disabled Checked Checkbox" Checked="true" Disabled="true" />

<h2>Buttons</h2>
<Label>Button Result: @buttonDebug</Label>
<PrimaryButton Text="Primary Button" Command=@buttonCommand CommandParameter=@("Primary") />
<PrimaryButton Disabled="true" Text="Disabled Primary Button" />

<DefaultButton Text="Default Button" Command=@buttonCommand CommandParameter=@("Default") />
<DefaultButton Disabled="true" Text="Disabled Default Button" />

<ActionButton Text="Action Button" IconName="Airplane" Command=@buttonCommand CommandParameter=@("Action")/>
<ActionButton Text="Disabled Action Button" Disabled="true" IconName="Mail" Command=@buttonCommand CommandParameter=@("Action") />

<Label>Toggle Buttons</Label>
<DefaultButton Text="Toggle Button" Toggle="true" Command=@buttonCommand CommandParameter=@("Toggle") />

<div style="height:5px"></div>
<Checkbox Label="Bound to toggle button below"  @bind-Checked=@isToggled @bind-Checked:event="CheckedChanged" />
<DefaultButton Text=@(isToggled ? "Not Toggled" : "Toggled") Toggle="true" @bind-Checked=@isToggled @bind-Checked:event="CheckedChanged" Command=@buttonCommand CommandParameter=@("Toggle") />

<div style="height:5px"></div>
<DefaultButton Href="/#link" Text="Link Button"/>

<h2>Icons</h2>
<Icon IconName="Airplane" ClassName="iconExample"/>
<Icon IconName="Mail" ClassName="iconExample" />
<Icon IconName="Video" ClassName="iconExample red"/>


@code{
    System.Windows.Input.ICommand buttonCommand;
    int commandCount = 0;
    bool isChecked = false;
    string buttonDebug = "";

    bool isToggled = false;

    protected override Task OnInitAsync()
    {
        buttonCommand = new Utils.RelayCommand((p) =>
        {
            buttonDebug = $"{p.ToString()} button was clicked. {commandCount++}";
            StateHasChanged();
        });

        return base.OnInitAsync();
    }
}