@page "/listPage"
@using System.Linq 

    <div style="height:20px;">
        @DebugText
    </div>
    <DefaultButton OnClick=@(_=> basicList1.ScrollToIndexAsync(2700) ) 
                   Text="Scroll to item 2700"/>
    <div style="display:flex; flex-direction:column; height: calc(100vh - 73.5px);">
        <div style="display:flex;flex-direction:column;flex-grow:1;height:100%;">
            <BlazorFabric.Label>Virtualized List with selection modes</BlazorFabric.Label>
            <BlazorFabric.PrimaryButton Text="Add 2 items" OnClick="@ClickHandler3" />
            <BlazorFabric.PrimaryButton Text="Add 10 more items" OnClick="@ClickHandler" />
            <BlazorFabric.PrimaryButton Text="Start with 5000 items" OnClick="@ClickHandler2" />
            
            <div style="overflow-y:auto;">
                <BlazorFabric.BasicList ItemsSource=@data 
                                        @ref="basicList1"
                                        TItem="DataItem" 
                                        OnShouldVirtualize="()=>true"
                                        ItemClicked=@((item)=> DebugText = item.DisplayName + " clicked")>
                    <ItemTemplate>
                        <div style="display:flex; flex-direction:row; ">
                            <img height="50" width="50" src=@context.ImgUrl />
                            <em>This is item #@context.DisplayName.</em>
                        </div>
                    </ItemTemplate>
                </BlazorFabric.BasicList>
            </div>
        </div>
    </div>
@code {
    BasicList<DataItem> basicList1;
    int count = 0;
    System.Collections.ObjectModel.ObservableCollection<DataItem> data;
    string DebugText = "";
        
    Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 10; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler2(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        var tempData = new System.Collections.Generic.List<DataItem>();
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 5000; i++)
        {
            count++;

            tempData.Add(new DataItem(count));
        }
        data = new System.Collections.ObjectModel.ObservableCollection<DataItem>(tempData);
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler3(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 2; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        data = new System.Collections.ObjectModel.ObservableCollection<DataItem>();
        //for (var i = 0; i < 10; i++)
        //{
        //    count++;
        //    data.Add(new DataItem(i));
        //}

        return Task.CompletedTask;
    }
}
