@page "/listPage"
@using System.Linq 

    <BFUStack Style="height:100%;">
        <div style="height:20px;">
            @DebugText
        </div>

        <BFUDropdown ItemsSource=@selectionModeOptions
                  @bind-SelectedOption=SelectedModeOption                  
                  Style="max-width:300px;">
        </BFUDropdown>

        <BFUPrimaryButton Text="Add 10 items" OnClick="@ClickHandler" />
        <BFUPrimaryButton Text="Add 5000 items" OnClick="@ClickHandler2" />

        <BFULabel>Virtualized List with selection modes</BFULabel>
        
        
        <BFUSelectionZone SelectionMode=@((SelectionMode)Enum.Parse(typeof(SelectionMode), SelectedModeOption.Key))
                          Selection=@selection
                          TItem="DataItem"
                       @ref="selectionZone">
            <BFUFocusZone Style="height:100%;overflow-y:hidden;">
                <BFUList ItemsSource=@data
                                   TItem="DataItem">
                    <ItemTemplate>

                        <div style="display:flex; flex-direction:row;" 
                             data-selection-index=@context.Index
                             class=@($"ms-List-cell-default{(selection.IsKeySelected(context.Item.Key) ? " is-selected":"")}")
                             data-is-focusable="true"
                             @onclick=@(()=> {
                                            
                                            //selectionZone.HandleClick(context);
                                            DebugText = context.Item.Key + " clicked";
                                        })>
                            <img height="25" width="25" src=@context.Item.ImgUrl />
                            <em>This is item #@context.Item.Key</em>
                            <span style="margin-left:10px;">@context.Item.DisplayName</span>
                        </div>
                    </ItemTemplate>
                </BFUList>

            </BFUFocusZone>
        </BFUSelectionZone>
    </BFUStack> 

@code {
    int count = 0;
    System.Collections.ObjectModel.ObservableCollection<DataItem> data;
    string DebugText = "";

    private IBFUDropdownOption selectedModeOption;
    IBFUDropdownOption SelectedModeOption { get => selectedModeOption; set { selectedModeOption = value; this.selection.SelectionMode = (SelectionMode)Enum.Parse(typeof(SelectionMode), value.Key); } }

    List<IBFUDropdownOption> selectionModeOptions;

    Selection<DataItem> selection = new Selection<DataItem>();
    BFUSelectionZone<DataItem> selectionZone;

    protected override Task OnInitializedAsync()
    {
        data = new System.Collections.ObjectModel.ObservableCollection<DataItem>();
        selection.GetKey = (item) => item.Key;
        selection.SetItems(data);
        selection.SelectionChanged.Subscribe(_ => InvokeAsync(StateHasChanged));

        selectionModeOptions = Enum.GetValues(typeof(SelectionMode)).Cast<SelectionMode>()
            .Select(x => new BFUDropdownOption { Key = x.ToString(), Text = x.ToString() })
            .Cast<IBFUDropdownOption>()
            .ToList();
        selectedModeOption = selectionModeOptions.FirstOrDefault(x => x.Key == "Single");

        return Task.CompletedTask;
    }


    Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 10; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        selection.SetItems(data);
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler2(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //var tempData = new System.Collections.Generic.List<DataItem>();
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 5000; i++)
        {
            count++;

            data.Add(new DataItem(count));
        }
        selection.SetItems(data);
        //data = new System.Collections.ObjectModel.ObservableCollection<DataItem>(tempData);

        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler3(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 2; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        selection.SetItems(data);
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }



}
