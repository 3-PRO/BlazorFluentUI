@page "/textFieldPage"
@using System.ComponentModel.DataAnnotations

<h1>TextField</h1>

<Demo Header="Basic TextField" Key="0" MetadataPath="TextFieldPage">
    <div class="textFieldDiv">
        <BFUTextField Label="TextField" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField with PostalCode autocomplete" AutoComplete="AutoComplete.PostalCode" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Password" InputType="InputType.Password" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Disabled" Disabled="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Readonly" ReadOnly="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Required" Required="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField w/ Icon" IconName="Home" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Required="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="With Error" ErrorMessage="there is an error" />
    </div>
    @*<div class="textFieldDiv">
            <BFUTextField Label="With Input Mask" MaskChar="+" />
        </div>*@
    <div class="textFieldDiv">
        <BFUTextField Label="With Placeholder" Placeholder="placeholder text" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Disabled Placeholder" Placeholder="placeholder text" Disabled="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Disabled Placeholder" Placeholder="placeholder text" Disabled="true" />
    </div>
</Demo>

<Demo Header="TextField with prefix and/or suffix" Key="1" MetadataPath="TextFieldPage">
    <div class="textFieldDiv">
        <BFUTextField Label="With Prefix (text only)" Prefix="https://" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="With PrefixContent (custom content)">
            <PrefixContent>
                <BFUIcon IconName="Add" />
            </PrefixContent>
        </BFUTextField>
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="With Suffix (text only)" Suffix="bananas" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="With SuffixContent (custom content)">
            <SuffixContent>
                <BFUIcon IconName="Home" />
            </SuffixContent>
        </BFUTextField>
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="With Prefix & Suffix" Prefix="Dr." Suffix="Esquire" />
    </div>
</Demo>

<Demo Header="TextField with no labels" Key="2" MetadataPath="TextFieldPage">
    <div class="textFieldDiv">
        <BFUTextField Required="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Underlined="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Disabled="true" />
    </div>
</Demo>


<Demo Header="Multiline TextField" Key="3" MetadataPath="TextFieldPage">
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Multiline" Multiline="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Multiline Required" Multiline="true" Required="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Multiline Disabled" Multiline="true" Disabled="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Not resizable" Multiline="true" Resizable="false" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Auto-adjusting height" Multiline="true" AutoAdjustHeight="true" />
    </div>
</Demo>

<Demo Header="Underline &amp; Borderless TextField" Key="4" MetadataPath="TextFieldPage">
    <h2>Underline &amp; Borderless</h2>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Underlined" Underlined="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Underlined Disabled" Underlined="true" Disabled="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Underlined Required" Underlined="true" Required="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Borderless" Borderless="true" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="TextField Multiline Borderless" Multiline="true" Borderless="true" />
    </div>
</Demo>

<Demo Header="Binding Modes" Key="5" MetadataPath="TextFieldPage">
    <div class="textFieldDiv" style="display:flex; flex-direction: row">
        <BFUTextField Label="TextField OnInput 1" @bind-Value=@onInputContent @bind-Value:event="OnInput" OnGetErrorMessage="GetErrorMessage" />
        <BFUTextField Label="TextField OnInput 2" Value=@onInputContent />
    </div>
    <div class="textFieldDiv" style="display:flex; flex-direction: row">
        <BFUTextField Label="TextField OnChange 1" @bind-Value=@onChangeContent @bind-Value:event="OnChange"  OnGetErrorMessage="GetErrorMessage"/>
        <BFUTextField Label="TextField OnChange 2" Value=@onChangeContent />
    </div>
</Demo>

<Demo Header="TextField Error Message Variations" Key="6" MetadataPath="TextFieldPage">

    <h4>Hint: the input length must be less than 3.</h4>

    <div class="textFieldDiv">
        <BFUTextField Label="String-based validation" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="String-based validation on render" DefaultValue="Shows an error message on render" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="String-based validation only on change" DefaultValue="Validates only on input change, not on render" OnGetErrorMessage="GetErrorMessage" ValidateOnLoad="false" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Both description and error message" DefaultValue="Shows description and error message on render" Description="Field description" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Deferred string-based validation" Placeholder="Validates after user stops typing for 2 seconds" DeferredValidationTime="2000" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Validates only on focus and blur" Placeholder="Validates only on input focus and blur" ValidateOnFocusIn="true" ValidateOnFocusOut="true" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Validates only on blur" Placeholder="Validates only on blur" ValidateOnFocusOut="true" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Underlined field " DefaultValue="This value is too long" Underlined="true" OnGetErrorMessage="GetErrorMessage" />
    </div>
    <div class="textFieldDiv">
        <BFUTextField Label="Uses the errorMessage property to set an error state" Placeholder="This field always has an error" ErrorMessage="This is a statically set error message" />
    </div>
</Demo>

<Demo Header="Validation using Blazor's InputBase<string> and EditForm" Key="7" MetadataPath="TextFieldPage">
    <EditForm Model=@exampleModel OnValidSubmit=@HandleValidSubmit>
        <DataAnnotationsValidator />
        <BFUValidationSummary />

        <BFUTextField Label="OnChange - Input can't be longer than 5 characters" @bind-Value=@exampleModel.NameOnChange />
        <BFUTextField Label="OnInput - Input can't be longer than 5 characters" @bind-Value=@exampleModel.NameOnInput @bind-Value:event="OnInput" />

        <BFUSubmitButton Text="Submit" />
    </EditForm>
</Demo>

    @code {
        string onInputContent = "";
        string onChangeContent = "";

        ExampleModel exampleModel = new ExampleModel();

        class ExampleModel
        {
            [Required]
            [StringLength(5, ErrorMessage="NameOnChange is too long.")]
            public string NameOnChange { get; set; }
            [Required]
            [StringLength(5, ErrorMessage = "NameOnInput is too long.")]
            public string NameOnInput { get; set; }
        }

        public void HandleValidSubmit()
        {
            var i = 3;
        }

        public string GetErrorMessage(string value)
        {
            return value.Length < 3 ? "" : $"Input value length must be less than 3. Actual length is {value.Length}.";
        }
    }
