@namespace BlazorFluentUI
@inherits BFUComponentBase
@typeparam TItem

@if (dataItems != null)
{
    <BFUList TItem="GroupedListItem<TItem>"
          @ref="listReference"
          ClassName=@($"ms-GroupedList{(string.IsNullOrEmpty(ClassName) ? "" : " " + ClassName)}")
          IsVirtualizing=@IsVirtualizing
          ItemsSource=@dataItems
          OnViewportChanged=@OnViewportChanged
          >
        <ItemTemplate>

            @if (context.Item is HeaderItem<TItem>)
            {
                var header = context.Item as HeaderItem<TItem>;
                <BFUGroupHeader IsOpen=@header.IsOpen 
                             OnOpenChanged=@((isOpen)=>header.IsOpen = isOpen)
                             Count=@header.RecursiveCount
                             GroupLevel=@header.Depth
                             Name=@header.Name 
                             Compact=@Compact 
                             ListIndex=@context.Index
                             IsSelectionCheckVisible=@(SelectionZone != null)
                             OnClick=@(()=>OnHeaderClicked(context))
                             OnToggle=@(()=>OnHeaderToggled(context))
                             />
            }
            else
            {
                @if (context.Item.IsVisible)
                {
                    @ItemTemplate(context)
                }
            }
        </ItemTemplate>
    </BFUList>
        
}
   