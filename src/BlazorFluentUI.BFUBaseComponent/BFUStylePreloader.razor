@namespace BlazorFluentUI
@inherits BFUComponentBase

@if (LoadAllComponents)
{
    foreach (var type in Statics.ComponentTypes)
    {
        IHasPreloadableGlobalStyle instance = null;
        if (type.IsGenericType)
        {
            var genericTypeArgs = type.GetGenericArguments();
            var objectTypeArgs = new List<Type>();
            foreach (var arg in genericTypeArgs)
            {
                objectTypeArgs.Add(typeof(object));
            }
            instance = (IHasPreloadableGlobalStyle)Activator.CreateInstance(type.MakeGenericType(objectTypeArgs.ToArray()));

        }
        else
        {
            instance = (IHasPreloadableGlobalStyle)Activator.CreateInstance(type);
        }
        <BFUGlobalCS ComponentType=@type 
                  CreateGlobalCss=@(()=>instance.CreateGlobalCss(Theme)) 
                  FixStyle="true"/>
    }
}
else
{
    <BFUGlobalCS ComponentType=@(Component.GetType()) 
              CreateGlobalCss=@(() => Component.CreateGlobalCss(this.Theme)) 
              FixStyle="true"/>
}

@code {
    [Inject] private ScopedStatics Statics { get; set; }
    [Parameter] public IHasPreloadableGlobalStyle Component { get; set; }


    /// <summary>
    /// If true, uses reflection to scan all assemblies for components that implement IHasPreloadableGlobalStyle
    /// </summary>
    [Parameter] public bool LoadAllComponents { get; set; }

    //private List<Type> componentTypes = new List<Type>();

    protected override void OnInitialized()
    {
        if (!Statics.AssembliesScanned)
        {
            Statics.AssembliesScanned = true;
            Statics.ComponentTypes = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())
                  .Where(x => typeof(IHasPreloadableGlobalStyle).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                  .ToList();

            AppDomain.CurrentDomain.AssemblyLoad += (s, e) =>
            {
                Statics.ComponentTypes.AddRange(e.LoadedAssembly.GetTypes().Where(x => typeof(IHasPreloadableGlobalStyle).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract));
                if (LoadAllComponents)
                {
                    InvokeAsync(StateHasChanged);
                }
            };
        }

        base.OnParametersSet();
    }
}
