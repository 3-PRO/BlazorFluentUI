@namespace BlazorFabric
@inherits ModalBase

@*@if (IsOpen)
{*@
<BlazorFabric.Layer Style="ms-Modal-Layer">
    <BlazorFabric.Popup Role=@((IsModeless || !IsBlocking) ? "dialog" : "alertdialog" )
                              AriaLabelledBy=@TitleAriaId
                              AriaDescribedBy=@SubtitleAriaId
                              OnDismiss=@OnDismiss>
        <div class=@($"mediumFont ms-Modal{(IsOpen ? " isOpen" : "")}{(IsModeless ? " isModeless" : "")}{(TopOffsetFixed ? " topOffsetFixed" : "")}")>
            @if (!IsModeless)
            {
                if (IsBlocking)
                {
                    <BlazorFabric.Overlay IsDarkThemed=@IsDarkOverlay />
                }
                else
                {
                    <BlazorFabric.Overlay IsDarkThemed=@IsDarkOverlay OnClick=@((ev) => OnDismiss.InvokeAsync(ev)) />
                }
            }
            <FocusTrapZone ClassName=@($"ms-Modal-main {ContainerClass}")
                           Disabled=@(!IsOpen)
                           ElementToFocusOnDismiss=@ElementToFocusOnDismiss
                           IsClickableOutsideFocusTrap=@(IsModeless || IsClickableOutsideFocusTrap || !IsBlocking)
                           IgnoreExternalFocusing=@IgnoreExternalFocusing
                           ForceFocusInsideTrap=@(IsModeless ? !IsModeless : ForceFocusInsideTrap)
                           FirstFocusableSelector=@FirstFocusableSelector
                           FocusPreviouslyFocusedInnerElement="true"
                           >
                <div @ref="allowScrollOnModal"
                     class="ms-Modal-scrollableContent"
                     data-is-scrollable=true>
                    @ChildContent
                </div>
            </FocusTrapZone>
        </div>
    </BlazorFabric.Popup>
</BlazorFabric.Layer>
@*}*@