@namespace BlazorFabric
@using Microsoft.AspNetCore.Components.Web

@inherits FabricComponentBase

@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div @ref="RootElementReference"
     role="listitem"
     class=@($"ms-List-cell fabricList-item {(IsActive ? "is-active" : "")}")
     @onclick="@(e=>OnItemClick(e))">
    @ChildContent
</div>

@code {
    public double Width { get; set; }
    public double Height { get; set; }

    [Parameter] public object Item { get; set; }

    [Parameter] public bool IsActive { get; set; }

    [Parameter] public int IndexPosition { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Func<object, MouseEventArgs, Task> ItemClicked { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //var result = await JSRuntime.InvokeAsync<Dictionary<string, double>>("BlazorFabricList.measureElement", rootElement);
        //this.Width = result["width"];
        //this.Height = result["height"];
        await base.OnAfterRenderAsync(firstRender);
    }

    private Task OnItemClick(MouseEventArgs e)
    {

        return ItemClicked.Invoke(this.Item, e);
    }
}